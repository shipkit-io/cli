---
description:
globs:
alwaysApply: false
---
# Development Workflow

This document outlines the development workflow for the ShipKit CLI project.

## Setup

1. Clone the repository
2. Install dependencies with `npm install`
3. Build the project with `npm run build`

## Development Scripts

The following npm scripts are available in [package.json](mdc:package.json):

- `npm run build` - Compile TypeScript to JavaScript
- `npm run dev` - Watch for changes and recompile automatically
- `npm start` - Run the compiled CLI
- `npm test` - Run tests (currently a placeholder)

## Code Organization

When developing new features or fixing bugs:

1. Define TypeScript interfaces in [src/types.ts](mdc:src/types.ts)
2. Add utility functions in [src/utils.ts](mdc:src/utils.ts)
3. Implement command logic in the [src/commands](mdc:src/commands) directory
4. Register commands in [src/index.ts](mdc:src/index.ts)

## Building for Production

The project uses TypeScript for development but distributes JavaScript for compatibility. The TypeScript compiler outputs to the `dist` directory.

For global installation:

```bash
npm link
```

This creates a global symlink to run the CLI directly with the `shipkit` command.

## Executable Entry Point

The CLI executable is defined in [bin/shipkit.js](mdc:bin/shipkit.js), which loads the compiled JavaScript from the `dist` directory.

## Adding New Commands

To add a new command:

1. Create a new file in [src/commands](mdc:src/commands)
2. Implement the command function
3. Export the function
4. Register the command in [src/index.ts](mdc:src/index.ts) using Commander
